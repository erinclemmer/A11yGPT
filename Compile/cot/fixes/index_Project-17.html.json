[
    {
        "guideline": "1.1.1",
        "success_criteria": "alt attribute is missing in iframe or img tag",
        "error_example": "<img src=\"logo.png\">",
        "fixed_example": "<img src=\"logo.png\" alt=\"Beauty Products Logo\">",
        "error_fixes": [
            {
                "problem_type": "alt attribute is missing in img tag",
                "offending_line": "<img src='logo.png' class='icon'>",
                "fixed_line": "<img src='logo.png' class='icon' alt='Logo'>",
                "CoT": "Let's first scan the HTML for any `<img>` tags to ensure they have the `alt` attribute. Let's look for any `<img>` tags."
            }
        ]
    },
    {
        "guideline": "1.3.1",
        "success_criteria": "input element or button is missing an associated label, it contains an alt attribute, or its label is empty",
        "error_example": "<input type=\"file\" id=\"myfile\" name=\"myfile\">",
        "fixed_example": "<label for=\"myfile\">I have a file</label><br>\n<input type=\"file\" id=\"myfile\" name=\"myfile\">",
        "error_fixes": [
            {
                "problem_type": "Input element or button is missing an associated label",
                "offending_line": "<label for=\"password\"></label><br>",
                "fixed_line": "<label for=\"password\">Password:</label><br>",
                "CoT": "1. Look for input elements and buttons in the HTML code.\n2. Check if each input element has a corresponding label using the \"for\" attribute that matches the input's \"id\" attribute.\n3. Verify that buttons have visible and meaningful text inside them, and if not, ensure they have an accessible name using the \"aria-label\" attribute.\n4. If there are input elements or buttons with an \"alt\" attribute, ensure that it is not used in place of a label, as the \"alt\" attribute is specifically for images and should not be used as a substitute for labeling interactive elements."
            }
        ]
    },
    {
        "guideline": "1.4.2",
        "success_criteria": "Audio or video element should avoid automatically playing audio ",
        "error_example": "<source src=\"bookstore-video.mp4\" type=\"video/mp4\" />",
        "fixed_example": "<video controls>\n<source src=\"bookstore-video.mp4\" type=\"video/mp4\">\nYour browser does not support the video tag.\n</video>",
        "error_fixes": [
            {
                "problem_type": "Audio or video element should avoid automatically playing audio",
                "offending_line": "<audio controls autoplay><source src='audio.mp3' type='audio/mpeg'></audio>",
                "fixed_line": "<audio controls><source src='audio.mp3' type='audio/mpeg'></audio>",
                "CoT": "Step 1: Look for audio or video elements in the HTML code.\nStep 2: Check if any of these elements have the `autoplay` attribute set.\nStep 3: If `autoplay` attribute is found, consider if it's necessary for accessibility or if it could potentially cause issues such as automatically playing audio."
            }
        ]
    },
    {
        "guideline": "1.4.4",
        "success_criteria": "<b> <i> or <font> tag should not be used",
        "error_example": "<font size=\"5\">Description of the book...</font>",
        "fixed_example": "<p>Description of the book...</p>",
        "error_fixes": [
            {
                "problem_type": "Font tag used for styling",
                "offending_line": "<font color='#333'>",
                "fixed_line": "Consider using CSS for styling instead of the <font> tag.",
                "CoT": "To find and fix the issue of using the `<b>`, `<i>`, or `<font>` tags, we need to follow these steps:\n\n1. Identify any `<b>`, `<i>`, or `<font>` tags in the HTML code.\n2. Replace them with semantic HTML elements or use CSS for styling.\n\nLet's go through the HTML code and identify any usage of `<b>`, `<i>`, or `<font>` tags."
            }
        ]
    },
    {
        "guideline": "2.1.1",
        "success_criteria": "onmousedown event missing onkeydown event or script is not keyboard accessible",
        "error_example": "",
        "fixed_example": "",
        "error_fixes": [
            {
                "problem_type": "onkeydown event missing for onclick event on button",
                "offending_line": "<button onclick=\"generateResume()\" style=\"color: rgb(255, 255, 255); background-color: rgb(76, 175, 80);\">Generate Resume</button>",
                "fixed_line": "<button onclick=\"generateResume()\" onkeydown=\"generateResume()\" style=\"color: rgb(255, 255, 255); background-color: rgb(76, 175, 80);\">Generate Resume</button>",
                "CoT": "1. Look for elements with event handlers: Check for elements with event handlers that are related to user interaction, such as onclick, onmouseover, etc. In this case, we have `onclick` event handler for the \"Generate Resume\" button and `onmouseover` event handler for one of the navigation links.\n\n2. Review the event handlers for keyboard accessibility: Check if the event handlers have an equivalent keyboard event for accessibility. In this case, we need to look for `onkeydown` event for the `onclick` and `onmouseover` event handlers found in the code.\n\n3. Ensure keyboard accessibility: Add appropriate keyboard event handlers (`onkeydown`) alongside the existing event handlers to ensure keyboard accessibility for users who navigate the website using a keyboard.\n\nLet's apply these steps to the given HTML code."
            }
        ]
    },
    {
        "guideline": "2.2.1",
        "success_criteria": "meta refresh with a time-out is used.",
        "error_example": "",
        "fixed_example": "",
        "error_fixes": []
    },
    {
        "guideline": "2.2.2",
        "success_criteria": "<marquee> element should not be used.",
        "error_example": "",
        "fixed_example": "",
        "error_fixes": [
            {
                "problem_type": "Marquee element used",
                "offending_line": "<marquee> element should not be used.",
                "fixed_line": "NONE",
                "CoT": "Let's start by reviewing the provided HTML code to identify any <marquee> elements being used. We will use a step-by-step approach to find and address the issue:\n\n1. Check the entire HTML code for any occurrence of the <marquee> tag.\n2. If any <marquee> tag is found, determine where it is used and how it affects accessibility.\n3. If a <marquee> tag is used, provide an alternative solution that does not rely on this outdated and inaccessible element."
            }
        ]
    },
    {
        "guideline": "2.4.2",
        "success_criteria": "title element is empty",
        "error_example": "<title></title>",
        "fixed_example": "<title>Beauty Products Store</title>",
        "error_fixes": [
            {
                "problem_type": "Empty title element",
                "offending_line": "<title>Resume Maker</title>",
                "fixed_line": "<title>Resume Maker - Create Your Resume</title>",
                "CoT": "Sure, let's go through the steps to find the issue:\n\n1. Identify the `<title>` element in the HTML code.\n2. Check if the `<title>` element has any text content within it.\n3. If the `<title>` element is empty, then we have identified the accessibility issue related to the title element."
            }
        ]
    },
    {
        "guideline": "2.4.4",
        "success_criteria": "anchor element contains no text",
        "error_example": "",
        "fixed_example": "",
        "error_fixes": [
            {
                "problem_type": "Anchor element contains no text",
                "offending_line": "<a onmouseover=\"sample()\" href=\"#\">Home</a>",
                "fixed_line": "<a onmouseover=\"sample()\" href=\"#\"><span>Home</span></a>",
                "CoT": "First, I will look for anchor elements (<a>) in the HTML code. Then, I will check if any of these anchor elements do not have text content within them. If I find any anchor element without text content, I will identify it as an accessibility issue related to the anchor element containing no text."
            }
        ]
    },
    {
        "guideline": "3.1.1",
        "success_criteria": "document language not identified or incorrect",
        "error_example": "",
        "fixed_example": "",
        "error_fixes": [
            {
                "problem_type": "Document language not identified or incorrect",
                "offending_line": "<html lang=\"ex\">",
                "fixed_line": "<html lang=\"en\">",
                "CoT": "To find the issue of \"document language not identified or incorrect\", we need to ensure that the HTML document specifies the correct language using the lang attribute in the <html> tag. This is important for screen readers and other assistive technologies to properly interpret the content language.\n\nLet's check the <html> tag in the provided HTML code:\n\n```html\n<html lang=\"ex\">\n```\n\nThe lang attribute is set to \"ex\" which is not a valid language code. The correct language code for English is \"en\".\n\nTo fix this issue, we need to change the lang attribute value to \"en\":\n\n```html\n<html lang=\"en\">\n```\n\nBy making this change, we are correctly identifying the language of the document as English, which will improve accessibility for users who rely on assistive technologies."
            }
        ]
    },
    {
        "guideline": "3.3.2",
        "success_criteria": "input element has more than one associated label",
        "error_example": "",
        "fixed_example": "",
        "error_fixes": [
            {
                "problem_type": "Input element has more than one associated label",
                "offending_line": "<label for=\"password\"></label><br>",
                "fixed_line": "<label for=\"password\">Password:</label><br>",
                "CoT": "Step 1: Identify all input elements in the HTML code.\nStep 2: Check if each input element has associated label elements.\nStep 3: Verify if any input element has more than one associated label.\nStep 4: Flag the input element that has more than one associated label as the accessibility issue."
            }
        ]
    },
    {
        "guideline": "4.1.1",
        "success_criteria": "element does not have complete start and end tags or id attribute is not unique",
        "error_example": "<li><a href=\"#\">Services</li>",
        "fixed_example": "<li><a href=\"#\">Services</a></li>",
        "error_fixes": [
            {
                "problem_type": "Incomplete start and end tag",
                "offending_line": "<label for=\"password\"></label><br>",
                "fixed_line": "<label for=\"password\">Password:</label><br>",
                "CoT": "First, let's focus on the incomplete start and end tags in the HTML code. We need to ensure that each element has a complete start and end tag.\n\nLooking at the code, I can see that there is an issue with the `<label>` element for the password input field. It is missing the content that describes what the label is for. This can be confusing for screen reader users. Let's correct this by adding a description within the `<label>` tag.\n\nNext, let's check for unique id attributes. Each id attribute should be unique within the document.\n\nChecking the id attributes in the code, I can see that the radio buttons have ids \"1\", \"2\", and \"3\". Using numeric values as id attributes is not recommended and can cause confusion or potential conflicts. Let's update these ids to more descriptive and unique values.\n\nLet's proceed with fixing these issues."
            }
        ]
    }
]